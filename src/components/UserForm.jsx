import React, { useEffect, useState } from "react";
import axios from "axios";
import Swal from "sweetalert2";
import { toast } from "react-toastify";

const API_URL = "http://localhost:5000/api/users";

const UserForm = () => {
  const [users, setUsers] = useState([]);
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("employee");
  const [salaryRate, setSalaryRate] = useState("");
  const [editingId, setEditingId] = useState(null); 

  const fetchUsers = async () => {
    const res = await axios.get(API_URL);
    setUsers(res.data);
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      if (editingId) {
        await axios.put(`${API_URL}/${editingId}`, {
          full_name: fullName,
          email,
          password,
          role,
          salary_rate: parseFloat(salaryRate),
        });
        toast.success(" C·∫≠p nh·∫≠t th√†nh c√¥ng!");
      } else {
        await axios.post(API_URL, {
          full_name: fullName,
          email,
          password,
          role,
          avatar: "",
          salary_rate: parseFloat(salaryRate),
        });
        toast.success(" Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c th√™m!");
      }

      setFullName("");
      setEmail("");
      setPassword("");
      setRole("employee");
      setSalaryRate("");
      setEditingId(null);
      fetchUsers();
    } catch (err) {
      console.error(err);
      toast.error(" Th√™m ho·∫∑c s·ª≠a th·∫•t b·∫°i!");
    }
  };

  const handleEdit = (user) => {
    setFullName(user.full_name);
    setEmail(user.email);
    setPassword(""); 
    setRole(user.role);
    setSalaryRate(user.salary_rate);
    setEditingId(user.id);
  };

  const handleDelete = async (id) => {
  const result = await Swal.fire({
    title: "B·∫°n c√≥ ch·∫Øc mu·ªën xo√°?",
    text: "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonText: "Xo√°",
    cancelButtonText: "Hu·ª∑",
  });

  if (result.isConfirmed) {
    try {
      await axios.delete(`${API_URL}/${id}`);
      toast.success(" Xo√° nh√¢n vi√™n th√†nh c√¥ng!");
      fetchUsers();
    } catch (err) {
      console.error(err);
      toast.error(" Xo√° th·∫•t b·∫°i!");
    }
  }
};


  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold text-center mb-4">
        {editingId ? " S·ª≠a th√¥ng tin nh√¢n vi√™n" : " Th√™m nh√¢n vi√™n"}
      </h1>
      <form onSubmit={handleSubmit} className="space-y-4 mb-10">
        <input
          type="text"
          placeholder="H·ªç v√† t√™n"
          value={fullName}
          onChange={(e) => setFullName(e.target.value)}
          className="border px-3 py-2 w-full"
          required
        />
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="border px-3 py-2 w-full"
          required
        />
        <input
          type="password"
          placeholder="M·∫≠t kh·∫©u"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="border px-3 py-2 w-full"
          required={!editingId}
        />
        <input
          type="number"
          placeholder="L∆∞∆°ng / gi·ªù (VNƒê)"
          value={salaryRate}
          onChange={(e) => setSalaryRate(e.target.value)}
          className="border px-3 py-2 w-full"
          required
        />
        <select
          value={role}
          onChange={(e) => setRole(e.target.value)}
          className="border px-3 py-2 w-full"
        >
          <option value="">-- Ch·ªçn v·ªã tr√≠ --</option>
          <option value="admin">Admin</option>
          <option value="nhanvien">Nh√¢n vi√™n</option>

        
        </select>
        <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">
          {editingId ? "C·∫≠p nh·∫≠t" : "Th√™m"}
        </button>
      </form>

      <h2 className="text-2xl font-bold mb-4">üìã Danh s√°ch nh√¢n vi√™n</h2>
      <table className="w-full border border-collapse">
        <thead className="bg-gray-300">
          <tr>
            <th className="border px-4 py-2">T√™n</th>
            <th className="border px-4 py-2">Email</th>
            <th className="border px-4 py-2">Vai tr√≤</th>
            <th className="border px-4 py-2">L∆∞∆°ng/h</th>
            <th className="border px-4 py-2">H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id} className="hover:bg-gray-50">
              <td className="border px-4 py-2">{user.full_name}</td>
              <td className="border px-4 py-2">{user.email}</td>
              <td className="border px-4 py-2 text-center">{user.role}</td>
              <td className="border px-4 py-2 text-center">{user.salary_rate.toLocaleString()}</td>
              <td className="border px-4 py-2 text-center space-x-2">
                <button
                  onClick={() => handleEdit(user)}
                  className="px-2 py-1 bg-blue-600 rounded text-white"
                >
                  <i class="fa-solid fa-pen-to-square"></i>
                </button>
                <button
                  onClick={() => handleDelete(user.id)}
                  className="px-2 py-1 bg-red-500 rounded text-white"
                >
                  <i class="fa-solid fa-trash"></i>
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserForm;
